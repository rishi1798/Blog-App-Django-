# Function based VIews for starting page

# def starting_page(request):
#     latest_posts=Post.objects.all().order_by("-date")[:4]
#     return render(request, "blog/index.html",{'posts':latest_posts})


# def starting_page(request) :
    # request.session['name']='Rishi'
    # name=request.session['name']
    # request.session.set_expiry(10)
    # print(request.session.get_session_cookie_age())
    # if 'name' in request.session:
    #     request.session.modified = True
    #     name=request.session['name']
    #     latest_posts=Post.objects.all().order_by("-date")[:4]
    #     return render(request, "blog/index.html",{'posts':latest_posts,'name':name})
    # else:
    #     return HttpResponse("Session has expired")
    # latest_posts=Post.objects.all().order_by("-date")[:4]
    # return render(request, "blog/index.html",{'posts':latest_posts})


# Function based view for Allposts function

# def posts(request):
#     all_posts=Post.objects.all().order_by("-date")[:4]
#     return render(request,'blog/all-posts.html',{'all_posts':all_posts})


# class based views for DetailPOsts

# class DetailPosts(LoginRequiredMixin,DetailView):
#     model=Post
#     template_name='blog/post-detail.html'
#     context_object_name='post'
    # Both url are same url generated by reverse_lazy is -->'/Applogin/login/'
    # login_url='/Applogin/login/'
    # login_url=reverse_lazy('login')
    

    # def get_context_data(self, **kwargs):
    #     context=super().get_context_data(**kwargs)
    #     context['post_tags']=self.object.tags.all()
    #     context["comment_form"]=CommentForm()
    #     print(context)
    #     print(self.login_url)

    #     return context

# Function based view for DetailPosts

# def detail_page(request,slug):
    # identified_post=next(post for post in all_posts if post['slug']==slug)
    # identified_post=Post.objects.get(slug=slug)
    # if request.user.is_authenticated:
    #     identified_post=get_object_or_404(Post,slug=slug)
    #     return render(request,'blog/post-detail.html',{'post':identified_post})
    # else:
        # return redirect(reverse('login'))

